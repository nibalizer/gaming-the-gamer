

## Welcome to Jupyter Notebooks

## A part of IBM Data Science Experience


Jupyter notebooks are part executable code, part document, and part lab notebook.

Originally restricted to just ipython, jupyter now has multiple backends, called 'kernels.

IBM's offering has Scala, R, and Python 2.7/3.5 available.



It is also pluggable with Apache Spark and Spark ML.






print "hello world"


    hello world



for i in [1,2,3]:
    print i

    1
    2
    3



import pandas



## demo navigation
a, b
enter
ctrl+enter
shift+enter
dd


# Demo Markdown Cells  ( cell type flags)

Break Point #1





import requests, StringIO, json

def get_file_content(credentials):
    """For given credentials, this functions returns a StringIO object containg the file content
    from the associated Bluemix Object Storage V3."""

    url1 = ''.join([credentials['auth_url'], '/v3/auth/tokens'])
    data = {'auth': {'identity': {'methods': ['password'],
            'password': {'user': {'name': credentials['username'],'domain': {'id': credentials['domain_id']},
            'password': credentials['password']}}}}}
    headers1 = {'Content-Type': 'application/json'}
    resp1 = requests.post(url=url1, data=json.dumps(data), headers=headers1)
    resp1_body = resp1.json()
    for e1 in resp1_body['token']['catalog']:
        if(e1['type']=='object-store'):
            for e2 in e1['endpoints']:
                if(e2['interface']=='public'and e2['region']==credentials['region']):
                    url2 = ''.join([e2['url'],'/', credentials['container'], '/', credentials['filename']])
    s_subject_token = resp1.headers['x-subject-token']
    headers2 = {'X-Auth-Token': s_subject_token, 'accept': 'application/json'}
    resp2 = requests.get(url=url2, headers=headers2)
    return StringIO.StringIO(resp2.content)

# @hidden_cell
credentials_3 = {
  'auth_url':'https://identity.open.softlayer.com',
  'project':'object_storage_03887355_d6fb_4cd1_b0c8_597326bbdf10',
  'project_id':'3433ebb545a949e49d6a43a49901d95a',
  'region':'dallas',
  'user_id':'2ee92dab17ea47a5bc884ce90fc8741d',
  'domain_id':'04674617682247b0b6233073ad127c98',
  'domain_name':'1240157',
  'username':'member_a7c48ebb8af803ab5248e87df61592eec3fe8514',
  'password':"""cx/~9dN6PMq4l5}u""",
  'container':'StarCraftAnalysisIntroduction',
  'tenantId':'undefined',
  'filename':'Nerchio vs Neeb ZvP  Cactus Valley LE (Void) WCS Austin.SC2Replay'
}


!pip install sc2reader



    Requirement already satisfied: sc2reader in ./src/sc2reader
    Requirement already satisfied: mpyq>=0.2.4 in /gpfs/global_fs01/sym_shared/YPProdSpark/user/sc6f-c66e3af25e8503-63d3e185ade4/.local/lib/python2.7/site-packages (from sc2reader)




import sc2reader
from sc2reader.engine.plugins import ContextLoader, GameHeartNormalizer


replay = sc2reader.load_replay(
    get_file_content(credentials_2),
    engine=sc2reader.engine.GameEngine(plugins=[
        ContextLoader(),
        GameHeartNormalizer()

    ])
)



replay.players





    [Player 1 - Nerchio (Zerg), Player 2 - Neeb (Protoss)]



for human in replay.players:
    print human.name, human.pid, human.result

     Nerchio 1 Win
    Neeb 2 Loss


print replay.map_name


    Cactus Valley LE (Void)

print replay.date


    2017-04-30 20:04:37




print replay.region


neeb_buildings = [i for i in replay.players[1].units if i.is_building]



neeb_buildings[1:5]




    [Pylon [33C0002], WarpGate [3CC0001], Assimilator [3D80001], Pylon [3EC0001]]





neeb_buildings[0].minerals




# Break Point 2


stats = [i for i in replay.events if i.name == 'PlayerStatsEvent']



for event in stats:
    seconds = event.frame /22.4
    print event.workers_active_count, event.pid, seconds


from bokeh.plotting import figure, output_file, show, output_notebook
output_notebook()



xs = []
y_player_1 = []
y_player_2 = []
for event in stats:
    seconds = event.frame / 22.4
    if event.pid == 1:
        y_player_1.append(event.workers_active_count)
        xs.append(seconds)
    else:
        y_player_2.append(event.workers_active_count)

p = figure(width=1400)

p.multi_line(xs=[xs, xs], ys=[y_player_1, y_player_2],
             color=["firebrick", "navy"], alpha=[0.8, 0.3], line_width=4)

show(p)


food_used

event.vespene_used_active_forces + event.minerals_used_active_forces)
